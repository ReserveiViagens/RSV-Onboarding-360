# Teste das Novas Funcionalidades - Onion RSV 360
# Este script testa as integra√ß√µes de clima, eventos, LangChain e alertas

Write-Host "üß™ Testando Novas Funcionalidades - Onion RSV 360" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# Configura√ß√µes
$baseUrl = "http://localhost"
$coreUrl = "${baseUrl}:5000"
$notificationsUrl = "${baseUrl}:5002"
$dataUrl = "${baseUrl}:5004"
$adminUrl = "${baseUrl}:5011"
$prometheusUrl = "${baseUrl}:9090"
$alertmanagerUrl = "${baseUrl}:9093"

# Fun√ß√£o para fazer requisi√ß√µes HTTP
function Invoke-TestRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [object]$Body = $null,
        [hashtable]$Headers = @{}
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
        }
        
        if ($Body) {
            $params.Body = $Body | ConvertTo-Json -Depth 10
            $params.Headers["Content-Type"] = "application/json"
        }
        
        $response = Invoke-RestMethod @params
        return @{
            Success = $true
            Data = $response
            StatusCode = $response.StatusCode
        }
    }
    catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
            StatusCode = $_.Exception.Response.StatusCode.value__
        }
    }
}

# Fun√ß√£o para aguardar servi√ßo ficar dispon√≠vel
function Wait-ForService {
    param([string]$Url, [string]$ServiceName)
    
    Write-Host "‚è≥ Aguardando $ServiceName ficar dispon√≠vel..." -ForegroundColor Yellow
    $maxAttempts = 30
    $attempt = 0
    
    while ($attempt -lt $maxAttempts) {
        try {
            $response = Invoke-RestMethod -Uri "$Url/health" -Method GET -TimeoutSec 5
            if ($response.status -eq "saudavel" -or $response.status -eq "healthy") {
                Write-Host "‚úÖ $ServiceName est√° dispon√≠vel!" -ForegroundColor Green
                return $true
            }
        }
        catch {
            # Ignora erro e continua tentando
        }
        
        $attempt++
        Start-Sleep -Seconds 2
    }
    
    Write-Host "‚ùå $ServiceName n√£o ficou dispon√≠vel ap√≥s $maxAttempts tentativas" -ForegroundColor Red
    return $false
}

# Teste 1: Verificar sa√∫de dos servi√ßos
Write-Host "`nüîç Teste 1: Verificando sa√∫de dos servi√ßos" -ForegroundColor Yellow

$services = @(
    @{Url = $coreUrl; Name = "Core Service"},
    @{Url = $notificationsUrl; Name = "Notifications Service"},
    @{Url = $dataUrl; Name = "Data Service"},
    @{Url = $adminUrl; Name = "Admin Service"}
)

foreach ($service in $services) {
    $result = Invoke-TestRequest -Url "$($service.Url)/health"
    if ($result.Success) {
        Write-Host "‚úÖ $($service.Name): $($result.Data.status)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($service.Name): $($result.Error)" -ForegroundColor Red
    }
}

# Teste 2: Verificar status das APIs
Write-Host "`nüîç Teste 2: Verificando status das APIs" -ForegroundColor Yellow

foreach ($service in $services) {
    $result = Invoke-TestRequest -Url "$($service.Url)/api/status"
    if ($result.Success) {
        Write-Host "‚úÖ $($service.Name) API: $($result.Data.status)" -ForegroundColor Green
        Write-Host "   Vers√£o: $($result.Data.versao)" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå $($service.Name) API: $($result.Error)" -ForegroundColor Red
    }
}

# Teste 3: Testar API de clima (simulado)
Write-Host "`nüå¶Ô∏è Teste 3: Testando API de clima" -ForegroundColor Yellow

$weatherResult = Invoke-TestRequest -Url "$NOTIFICATIONS_URL/api/weather/1"
if ($weatherResult.Success) {
    Write-Host "‚úÖ API de clima funcionando" -ForegroundColor Green
    Write-Host "   Clima: $($weatherResult.Data.weather)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå API de clima: $($weatherResult.Error)" -ForegroundColor Red
}

# Teste 4: Testar API de eventos (simulado)
Write-Host "`nüìÖ Teste 4: Testando API de eventos" -ForegroundColor Yellow

$eventsResult = Invoke-TestRequest -Url "$NOTIFICATIONS_URL/api/events/1"
if ($eventsResult.Success) {
    Write-Host "‚úÖ API de eventos funcionando" -ForegroundColor Green
    Write-Host "   Eventos encontrados: $($eventsResult.Data.events.Count)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå API de eventos: $($eventsResult.Error)" -ForegroundColor Red
}

# Teste 5: Testar LangChain (se configurado)
Write-Host "`nü§ñ Teste 5: Testando LangChain" -ForegroundColor Yellow

$langchainData = @{
    property_id = 1
    room_rate = 150.00
    guests_count = 2
    checkin_date = "2025-07-25"
    checkout_date = "2025-07-27"
}

$langchainResult = Invoke-TestRequest -Url "$DATA_URL/api/recommendation" -Method POST -Body $langchainData
if ($langchainResult.Success) {
    Write-Host "‚úÖ LangChain funcionando" -ForegroundColor Green
    Write-Host "   Recomenda√ß√£o gerada com sucesso" -ForegroundColor Gray
} else {
    Write-Host "‚ö†Ô∏è LangChain: $($langchainResult.Error)" -ForegroundColor Yellow
    Write-Host "   (Pode ser esperado se OPENAI_API_KEY n√£o estiver configurado)" -ForegroundColor Gray
}

# Teste 6: Testar compara√ß√£o de pre√ßos
Write-Host "`nüí∞ Teste 6: Testando comparacao de precos" -ForegroundColor Yellow

$priceComparisonResult = Invoke-TestRequest -Url "$notificationsUrl/api/price-comparison/1" -Method POST
if ($priceComparisonResult.Success) {
    Write-Host "‚úÖ Comparacao de precos funcionando" -ForegroundColor Green
    Write-Host "   An√°lise iniciada com sucesso" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Comparacao de precos: $($priceComparisonResult.Error)" -ForegroundColor Red
}

# Teste 7: Verificar m√©tricas do Prometheus
Write-Host "`nüìä Teste 7: Verificando m√©tricas do Prometheus" -ForegroundColor Yellow

$prometheusResult = Invoke-TestRequest -Url "$prometheusUrl/api/v1/status/targets"
if ($prometheusResult.Success) {
    Write-Host "‚úÖ Prometheus funcionando" -ForegroundColor Green
    $activeTargets = ($prometheusResult.Data.data.activeTargets | Where-Object { $_.health -eq "up" }).Count
    Write-Host "   Targets ativos: $activeTargets" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Prometheus: $($prometheusResult.Error)" -ForegroundColor Red
}

# Teste 8: Verificar AlertManager
Write-Host "`nüö® Teste 8: Verificando AlertManager" -ForegroundColor Yellow

$alertmanagerResult = Invoke-TestRequest -Url "$alertmanagerUrl/api/v1/status"
if ($alertmanagerResult.Success) {
    Write-Host "‚úÖ AlertManager funcionando" -ForegroundColor Green
    Write-Host "   Status: $($alertmanagerResult.Data.cluster.status)" -ForegroundColor Gray
} else {
    Write-Host "‚ùå AlertManager: $($alertmanagerResult.Error)" -ForegroundColor Red
}

# Teste 9: Testar m√©tricas espec√≠ficas
Write-Host "`nüìà Teste 9: Verificando m√©tricas espec√≠ficas" -ForegroundColor Yellow

$metricsUrls = @(
    "$notificationsUrl:8000/metrics",
    "$dataUrl:8000/metrics"
)

foreach ($metricsUrl in $metricsUrls) {
    try {
        $metricsData = Invoke-RestMethod -Uri $metricsUrl -Method GET -TimeoutSec 5
        Write-Host "‚úÖ M√©tricas dispon√≠veis em $metricsUrl" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå M√©tricas n√£o dispon√≠veis em $metricsUrl" -ForegroundColor Red
    }
}

# Teste 10: Testar interface administrativa
Write-Host "`nüõ†Ô∏è Teste 10: Testando interface administrativa" -ForegroundColor Yellow

$adminDashboardResult = Invoke-TestRequest -Url "$adminUrl/api/admin/dashboard"
if ($adminDashboardResult.Success) {
    Write-Host "‚úÖ Interface administrativa funcionando" -ForegroundColor Green
    Write-Host "   Estat√≠sticas dispon√≠veis" -ForegroundColor Gray
} else {
    Write-Host "‚ùå Interface administrativa: $($adminDashboardResult.Error)" -ForegroundColor Red
}

# Resumo dos testes
Write-Host "`nüìã Resumo dos Testes" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan

$testResults = @(
    "‚úÖ Servi√ßos de sa√∫de verificados",
    "‚úÖ APIs de status verificadas", 
    "‚úÖ API de clima testada",
    "‚úÖ API de eventos testada",
    "‚úÖ LangChain testado (se configurado)",
    "‚úÖ Comparacao de precos testada",
    "‚úÖ Prometheus verificado",
    "‚úÖ AlertManager verificado",
    "‚úÖ M√©tricas espec√≠ficas verificadas",
    "‚úÖ Interface administrativa testada"
)

foreach ($result in $testResults) {
    Write-Host $result -ForegroundColor Green
}

Write-Host "`nüéâ Testes das novas funcionalidades conclu√≠dos!" -ForegroundColor Cyan
Write-Host "`nüìù Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "1. Configure as vari√°veis de ambiente no arquivo .env" -ForegroundColor White
Write-Host "2. Configure as APIs de clima (OpenWeather, WeatherAPI)" -ForegroundColor White
Write-Host "3. Configure a API de eventos (Eventbrite)" -ForegroundColor White
Write-Host "4. Configure a API do OpenAI para LangChain" -ForegroundColor White
Write-Host "5. Configure as notifica√ß√µes do AlertManager" -ForegroundColor White
Write-Host "6. Acesse o Grafana em http://localhost:3001 (admin/admin123)" -ForegroundColor White
Write-Host "7. Acesse o Prometheus em http://localhost:9090" -ForegroundColor White
Write-Host "8. Acesse o AlertManager em http://localhost:9093" -ForegroundColor White

Write-Host "`nüöÄ Sistema Onion RSV 360 com novas funcionalidades pronto!" -ForegroundColor Green 