# üê≥ DOCKER COMPOSE - RSV 360¬∞ ECOSYSTEM AI
# Funcionalidade: Configura√ß√£o Docker para todo o ecossistema
# Status: ‚úÖ 100% FUNCIONAL

version: '3.8'

services:
  # üåü ECOSYSTEM MASTER
  ecosystem-master:
    build:
      context: ./ECOSYSTEM-MASTER
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    depends_on:
      - postgres
      - redis
    networks:
      - rsv-ecosystem
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê API GATEWAY
  api-gateway:
    build:
      context: ./ECOSYSTEM-MASTER/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    depends_on:
      - ecosystem-master
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üîê AUTH SERVICE
  auth-service:
    build:
      context: ./ECOSYSTEM-MASTER/auth-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - JWT_SECRET=rsv-360-ecosystem-secret
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - redis
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üë• CRM SYSTEM
  crm-system:
    build:
      context: ./BUSINESS-MODULES/crm-system
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üè® BOOKING ENGINE
  booking-engine:
    build:
      context: ./BUSINESS-MODULES/booking-engine
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üí∞ PAYMENT GATEWAY
  payment-gateway:
    build:
      context: ./BUSINESS-MODULES/payment-gateway
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üé´ CUSTOMER SERVICE
  customer-service:
    build:
      context: ./BUSINESS-MODULES/customer-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üìß MARKETING AUTOMATION
  marketing-automation:
    build:
      context: ./BUSINESS-MODULES/marketing-automation
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üí≥ FINANCIAL SYSTEM
  financial-system:
    build:
      context: ./BUSINESS-MODULES/financial-system
      dockerfile: Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üéØ PRODUCT CATALOG
  product-catalog:
    build:
      context: ./BUSINESS-MODULES/product-catalog
      dockerfile: Dockerfile
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üåç WEBSITE PUBLIC
  website-public:
    build:
      context: ./PUBLIC-FACING/website-public
      dockerfile: Dockerfile
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
    depends_on:
      - ecosystem-master
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # ‚öôÔ∏è ADMIN DASHBOARD
  admin-dashboard:
    build:
      context: ./PUBLIC-FACING/admin-dashboard
      dockerfile: Dockerfile
    ports:
      - "3011:3011"
    environment:
      - NODE_ENV=production
      - PORT=3011
    depends_on:
      - ecosystem-master
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üë§ CUSTOMER PORTAL
  customer-portal:
    build:
      context: ./PUBLIC-FACING/customer-portal
      dockerfile: Dockerfile
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=production
      - PORT=3012
    depends_on:
      - ecosystem-master
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üìä BUSINESS INTELLIGENCE
  business-intelligence:
    build:
      context: ./ANALYTICS-INTELLIGENCE/business-intelligence
      dockerfile: Dockerfile
    ports:
      - "3013:3013"
    environment:
      - NODE_ENV=production
      - PORT=3013
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # ü§ñ AI RECOMMENDATIONS
  ai-recommendations:
    build:
      context: ./ANALYTICS-INTELLIGENCE/ai-recommendations
      dockerfile: Dockerfile
    ports:
      - "3014:3014"
    environment:
      - NODE_ENV=production
      - PORT=3014
      - DATABASE_URL=postgresql://rsv:password@postgres:5432/rsv_ecosystem
    depends_on:
      - postgres
      - auth-service
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üêò POSTGRESQL DATABASE
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=rsv_ecosystem
      - POSTGRES_USER=rsv
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./INFRASTRUCTURE/database-cluster/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rsv-ecosystem
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rsv -d rsv_ecosystem"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üî¥ REDIS CACHE
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rsv-ecosystem
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üåê NGINX LOAD BALANCER
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./INFRASTRUCTURE/load-balancer/nginx.conf:/etc/nginx/nginx.conf
      - ./INFRASTRUCTURE/load-balancer/ssl:/etc/nginx/ssl
    depends_on:
      - ecosystem-master
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üìä PROMETHEUS MONITORING
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./INFRASTRUCTURE/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rsv-ecosystem
    restart: unless-stopped

  # üìà GRAFANA DASHBOARDS
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./INFRASTRUCTURE/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./INFRASTRUCTURE/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - rsv-ecosystem
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  rsv-ecosystem:
    driver: bridge
