#!/bin/bash

# üîç SCRIPT DE VERIFICA√á√ÉO DE SA√öDE
# RSV 360¬∞ ECOSYSTEM - Health Check Completo

set -e

# üé® Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# üìã Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# üèóÔ∏è Banner
echo -e "${PURPLE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë           üîç RSV 360¬∞ ECOSYSTEM - HEALTH CHECK              ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë              Verifica√ß√£o Completa de Sa√∫de                  ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# üìä Contadores
total_checks=0
passed_checks=0
failed_checks=0

# üîç Fun√ß√£o para verificar servi√ßo
check_service() {
    local service_name=$1
    local url=$2
    local expected_status=${3:-200}
    
    total_checks=$((total_checks + 1))
    
    log "üîç Verificando $service_name..."
    
    if response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null); then
        if [ "$response" = "$expected_status" ]; then
            success "‚úÖ $service_name est√° funcionando (HTTP $response)"
            passed_checks=$((passed_checks + 1))
            return 0
        else
            warning "‚ö†Ô∏è $service_name retornou HTTP $response (esperado: $expected_status)"
            failed_checks=$((failed_checks + 1))
            return 1
        fi
    else
        error "‚ùå $service_name n√£o est√° respondendo"
        failed_checks=$((failed_checks + 1))
        return 1
    fi
}

# üóÑÔ∏è Fun√ß√£o para verificar banco de dados
check_database() {
    total_checks=$((total_checks + 1))
    
    log "üóÑÔ∏è Verificando banco de dados..."
    
    if docker-compose -f docker-compose.local.yml exec -T db-local pg_isready -U rsvuser -d rsv_ecosystem_local &>/dev/null; then
        success "‚úÖ Banco de dados est√° acess√≠vel"
        passed_checks=$((passed_checks + 1))
        
        # Verificar se as tabelas existem
        if docker-compose -f docker-compose.local.yml exec -T db-local psql -U rsvuser -d rsv_ecosystem_local -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" &>/dev/null; then
            success "‚úÖ Estrutura do banco de dados est√° OK"
        else
            warning "‚ö†Ô∏è Problema na estrutura do banco de dados"
        fi
    else
        error "‚ùå Banco de dados n√£o est√° acess√≠vel"
        failed_checks=$((failed_checks + 1))
    fi
}

# üî¥ Fun√ß√£o para verificar Redis
check_redis() {
    total_checks=$((total_checks + 1))
    
    log "üî¥ Verificando Redis..."
    
    if docker-compose -f docker-compose.local.yml exec -T redis-local redis-cli ping &>/dev/null; then
        success "‚úÖ Redis est√° funcionando"
        passed_checks=$((passed_checks + 1))
    else
        error "‚ùå Redis n√£o est√° respondendo"
        failed_checks=$((failed_checks + 1))
    fi
}

# üìä Fun√ß√£o para verificar containers
check_containers() {
    log "üìä Verificando status dos containers..."
    
    # Listar containers em execu√ß√£o
    echo -e "${CYAN}Containers em execu√ß√£o:${NC}"
    docker-compose -f docker-compose.local.yml ps
    
    # Verificar se todos os containers est√£o rodando
    local containers=(
        "rsv-ecosystem-master-local"
        "rsv-crm-system-local"
        "rsv-booking-engine-local"
        "rsv-hotel-management-local"
        "rsv-analytics-intelligence-local"
        "rsv-db-local"
        "rsv-redis-local"
        "rsv-monitoring-local"
        "rsv-grafana-local"
    )
    
    for container in "${containers[@]}"; do
        total_checks=$((total_checks + 1))
        
        if docker ps --format "table {{.Names}}" | grep -q "$container"; then
            if docker ps --format "table {{.Status}}" | grep -q "Up"; then
                success "‚úÖ Container $container est√° rodando"
                passed_checks=$((passed_checks + 1))
            else
                warning "‚ö†Ô∏è Container $container est√° parado"
                failed_checks=$((failed_checks + 1))
            fi
        else
            error "‚ùå Container $container n√£o encontrado"
            failed_checks=$((failed_checks + 1))
        fi
    done
}

# üåê Verificar servi√ßos web
log "üåê Verificando servi√ßos web..."

# Lista de servi√ßos para verificar
services=(
    "Ecosystem Master:http://localhost:3000/health:200"
    "CRM System:http://localhost:3001/health:200"
    "Booking Engine:http://localhost:3002/health:200"
    "Hotel Management:http://localhost:3003/health:200"
    "Analytics Intelligence:http://localhost:3004/health:200"
    "Grafana Dashboard:http://localhost:3005:200"
    "Prometheus:http://localhost:9090:200"
)

for service_info in "${services[@]}"; do
    IFS=':' read -r name url expected <<< "$service_info"
    check_service "$name" "$url" "$expected"
done

# üóÑÔ∏è Verificar banco de dados
check_database

# üî¥ Verificar Redis
check_redis

# üìä Verificar containers
check_containers

# üìà Verificar recursos do sistema
log "üìà Verificando recursos do sistema..."

# Verificar uso de CPU
cpu_usage=$(docker stats --no-stream --format "table {{.CPUPerc}}" | tail -n +2 | head -1 | sed 's/%//')
if (( $(echo "$cpu_usage < 80" | bc -l) )); then
    success "‚úÖ Uso de CPU est√° normal ($cpu_usage%)"
else
    warning "‚ö†Ô∏è Uso de CPU est√° alto ($cpu_usage%)"
fi

# Verificar uso de mem√≥ria
memory_usage=$(docker stats --no-stream --format "table {{.MemUsage}}" | tail -n +2 | head -1)
info "üìä Uso de mem√≥ria: $memory_usage"

# Verificar espa√ßo em disco
disk_usage=$(df -h . | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$disk_usage" -lt 80 ]; then
    success "‚úÖ Espa√ßo em disco est√° OK ($disk_usage% usado)"
else
    warning "‚ö†Ô∏è Espa√ßo em disco est√° baixo ($disk_usage% usado)"
fi

# üìä Relat√≥rio final
echo -e "${CYAN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üìä RELAT√ìRIO FINAL                       ‚ïë"
echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  Total de verifica√ß√µes: $total_checks                                    ‚ïë"
echo "‚ïë  ‚úÖ Passou: $passed_checks                                           ‚ïë"
echo "‚ïë  ‚ùå Falhou: $failed_checks                                           ‚ïë"
echo "‚ïë                                                              ‚ïë"

# Calcular porcentagem de sucesso
if [ $total_checks -gt 0 ]; then
    success_rate=$((passed_checks * 100 / total_checks))
    echo "‚ïë  üìà Taxa de sucesso: $success_rate%                                      ‚ïë"
    
    if [ $success_rate -ge 90 ]; then
        echo "‚ïë  üéâ Status: EXCELENTE                                      ‚ïë"
    elif [ $success_rate -ge 70 ]; then
        echo "‚ïë  ‚úÖ Status: BOM                                            ‚ïë"
    elif [ $success_rate -ge 50 ]; then
        echo "‚ïë  ‚ö†Ô∏è  Status: ATEN√á√ÉO NECESS√ÅRIA                            ‚ïë"
    else
        echo "‚ïë  ‚ùå Status: CR√çTICO                                        ‚ïë"
    fi
else
    echo "‚ïë  ‚ùå Nenhuma verifica√ß√£o foi executada                        ‚ïë"
fi

echo "‚ïë                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# üîß Sugest√µes de corre√ß√£o
if [ $failed_checks -gt 0 ]; then
    echo -e "${YELLOW}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üîß SUGEST√ïES DE CORRE√á√ÉO                ‚ïë"
    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  1. Verificar logs dos servi√ßos com problemas:              ‚ïë"
    echo "‚ïë     docker-compose -f docker-compose.local.yml logs [service] ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  2. Reiniciar servi√ßos com problemas:                       ‚ïë"
    echo "‚ïë     docker-compose -f docker-compose.local.yml restart [service] ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  3. Verificar se todas as portas est√£o livres:              ‚ïë"
    echo "‚ïë     netstat -tulpn | grep :3000                             ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  4. Limpar e reconstruir containers:                        ‚ïë"
    echo "‚ïë     docker-compose -f docker-compose.local.yml down -v      ‚ïë"
    echo "‚ïë     docker-compose -f docker-compose.local.yml up -d --build ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
fi

# üöÄ Comandos √∫teis
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    üöÄ COMANDOS √öTEIS                       ‚ïë"
echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  üìä Ver logs em tempo real:                                  ‚ïë"
echo "‚ïë     docker-compose -f docker-compose.local.yml logs -f      ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  üîÑ Reiniciar todos os servi√ßos:                             ‚ïë"
echo "‚ïë     docker-compose -f docker-compose.local.yml restart      ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  üõë Parar todos os servi√ßos:                                 ‚ïë"
echo "‚ïë     docker-compose -f docker-compose.local.yml down         ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  üßπ Limpeza completa:                                        ‚ïë"
echo "‚ïë     docker-compose -f docker-compose.local.yml down -v       ‚ïë"
echo "‚ïë     docker system prune -a -f                                ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# C√≥digo de sa√≠da baseado no resultado
if [ $failed_checks -eq 0 ]; then
    log "üéâ Todos os servi√ßos est√£o funcionando perfeitamente!"
    exit 0
elif [ $failed_checks -le 2 ]; then
    warning "‚ö†Ô∏è Alguns servi√ßos t√™m problemas menores"
    exit 1
else
    error "‚ùå Muitos servi√ßos t√™m problemas cr√≠ticos"
    exit 2
fi
